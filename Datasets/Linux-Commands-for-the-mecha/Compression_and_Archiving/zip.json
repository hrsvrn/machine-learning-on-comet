[
  { "input": "Create a zip archive named archive.zip containing file1.txt", "output": "zip archive.zip file1.txt" },
  { "input": "Compress notes.txt into notes.zip", "output": "zip notes.zip notes.txt" },
  { "input": "Zip the files doc1.txt and doc2.txt into documents.zip", "output": "zip documents.zip doc1.txt doc2.txt" },
  { "input": "Make a zip file called images.zip with photo1.jpg and photo2.jpg", "output": "zip images.zip photo1.jpg photo2.jpg" },
  { "input": "Create an archive myfiles.zip from main.py and utils.py", "output": "zip myfiles.zip main.py utils.py" },
  { "input": "Zip up the directory project into project.zip", "output": "zip -r project.zip project" },
  { "input": "Create compressed zip folder music.zip from audio1.mp3 and audio2.mp3", "output": "zip music.zip audio1.mp3 audio2.mp3" },
  { "input": "Add README.md to existing archive code.zip", "output": "zip code.zip README.md" },
  { "input": "Zip all text files into texts.zip", "output": "zip texts.zip *.txt" },
  { "input": "Create zip file source.zip with all python files", "output": "zip source.zip *.py" },
  { "input": "Zip everything inside the folder my_folder into zipped_folder.zip", "output": "zip -r zipped_folder.zip my_folder" },
  { "input": "Make a zip file photos.zip from all jpg files", "output": "zip photos.zip *.jpg" },
  { "input": "Compress the current directory contents into current.zip", "output": "zip -r current.zip ." },
  { "input": "Zip log.txt and data.csv into logs.zip", "output": "zip logs.zip log.txt data.csv" },
  { "input": "Create a zip named backup.zip containing all CSV files", "output": "zip backup.zip *.csv" },
  { "input": "Zip everything in src folder to src.zip", "output": "zip -r src.zip src" },
  { "input": "Make zip file configs.zip with config.yaml and settings.ini", "output": "zip configs.zip config.yaml settings.ini" },
  { "input": "Archive all html files into site.zip", "output": "zip site.zip *.html" },
  { "input": "Compress the scripts folder recursively to scripts.zip", "output": "zip -r scripts.zip scripts" },
  { "input": "Zip up project files index.html, style.css and app.js into web.zip", "output": "zip web.zip index.html style.css app.js" },
  { "input": "Create zip archive codes.zip from all .c and .h files", "output": "zip codes.zip *.c *.h" },
  { "input": "Zip all pdfs in folder books into books.zip", "output": "zip books.zip books/*.pdf" },
  { "input": "Compress all log files into logs.zip", "output": "zip logs.zip *.log" },
  { "input": "Zip report.docx and summary.pdf into report.zip", "output": "zip report.zip report.docx summary.pdf" },
  { "input": "Zip multiple folders folder1 and folder2 into folders.zip", "output": "zip -r folders.zip folder1 folder2" },
  { "input": "Zip videos from the folder movies into movies.zip", "output": "zip -r movies.zip movies" },
  { "input": "Create zip file bin.zip with all executables in /usr/bin", "output": "zip bin.zip /usr/bin/*" },
  { "input": "Zip the log directory into logs_backup.zip", "output": "zip -r logs_backup.zip log" },
  { "input": "Compress everything in /home/user/docs into docs.zip", "output": "zip -r docs.zip /home/user/docs" },
  { "input": "Zip the bash files into scripts.zip", "output": "zip scripts.zip *.sh" },
  { "input": "Make a zip of the backup directory", "output": "zip -r backup.zip backup" },
  { "input": "Zip the folder archive and ignore symbolic links", "output": "zip -r -y archive.zip archive" },
  { "input": "Compress index.md and license.txt into release.zip", "output": "zip release.zip index.md license.txt" },
  { "input": "Zip the entire directory structure of dev into dev_backup.zip", "output": "zip -r dev_backup.zip dev" },
  { "input": "Create archive.zip from main.c and input.txt", "output": "zip archive.zip main.c input.txt" },
  { "input": "Create a zip named user_data.zip containing user.csv", "output": "zip user_data.zip user.csv" },
  { "input": "Compress the entire game directory", "output": "zip -r game.zip game" },
  { "input": "Zip all markdown files into markdowns.zip", "output": "zip markdowns.zip *.md" },
  { "input": "Zip all XML files in current folder", "output": "zip xml_files.zip *.xml" },
  { "input": "Create a zip from .env and config.json", "output": "zip settings.zip .env config.json" },
  { "input": "Zip a folder named demo recursively", "output": "zip -r demo.zip demo" },
  { "input": "Make a zip of the bin folder", "output": "zip -r bin.zip bin" },
  { "input": "Compress java files into java_source.zip", "output": "zip java_source.zip *.java" },
  { "input": "Zip docker-compose.yml and Dockerfile", "output": "zip docker.zip docker-compose.yml Dockerfile" },
  { "input": "Zip all files with .out extension", "output": "zip output_files.zip *.out" },
  { "input": "Make a zip archive of all files starting with temp", "output": "zip temp_files.zip temp*" },
  { "input": "Zip .gitignore and LICENSE", "output": "zip git_license.zip .gitignore LICENSE" },
  { "input": "Zip everything under public_html", "output": "zip -r website.zip public_html" },
  { "input": "Zip the images and thumbnails folders together", "output": "zip -r pics.zip images thumbnails" },
  { "input": "Add test.txt to myarchive.zip", "output": "zip myarchive.zip test.txt" },
  { "input": "Zip python directory and output to py.zip", "output": "zip -r py.zip python" },
  { "input": "Compress all SVG files", "output": "zip svgs.zip *.svg" },
  { "input": "Make a zip archive from codebase folder", "output": "zip -r codebase.zip codebase" },
  { "input": "Create a zip file containing config and templates folders", "output": "zip -r config_templates.zip config templates" },
  { "input": "Compress all js files into frontend.zip", "output": "zip frontend.zip *.js" },
  { "input": "Zip all txt files in notes folder", "output": "zip notes.zip notes/*.txt" },
  { "input": "Zip the file example.py and data.csv", "output": "zip files.zip example.py data.csv" },
  { "input": "Create zip from testcases folder", "output": "zip -r testcases.zip testcases" },
  { "input": "Zip all dat files in current directory", "output": "zip datafiles.zip *.dat" },
  { "input": "Zip all files except images", "output": "zip -r archive.zip . -x images/*" },
  { "input": "Add another file to an existing zip", "output": "zip existing.zip newfile.txt" },
  { "input": "Create a compressed archive of utilities folder", "output": "zip -r utilities.zip utilities" },
  { "input": "Zip python scripts from scripts/ folder", "output": "zip scripts.zip scripts/*.py" },
  { "input": "Zip server logs into serverlogs.zip", "output": "zip serverlogs.zip server.log access.log" },
  { "input": "Create a zip for deployment folder", "output": "zip -r deployment.zip deployment" },
  { "input": "Zip up the homework files", "output": "zip homework.zip homework/*.txt" },
  { "input": "Archive all docs and PDFs", "output": "zip documents.zip *.doc *.pdf" },
  { "input": "Make a zip from random folder", "output": "zip -r random.zip random" },
  { "input": "Zip test results and analysis", "output": "zip results.zip test_results.txt analysis.txt" },
  { "input": "Compress the logs folder recursively", "output": "zip -r logs.zip logs" },
  { "input": "Zip all configuration files", "output": "zip configfiles.zip *.conf" },
  { "input": "Create a zip archive for deployment.sh and config.env", "output": "zip deploy.zip deployment.sh config.env" },
  { "input": "Zip the screenshots folder", "output": "zip -r screenshots.zip screenshots" },
  { "input": "Zip input1.txt and input2.txt into inputs.zip", "output": "zip inputs.zip input1.txt input2.txt" },
  { "input": "Create a zip from the notebook.ipynb", "output": "zip notebook.zip notebook.ipynb" },
  { "input": "Zip data directory recursively", "output": "zip -r data.zip data" },
  { "input": "Compress the tests folder with zip", "output": "zip -r tests.zip tests" },
  { "input": "Zip the archive folder into archive.zip", "output": "zip -r archive.zip archive" },
  { "input": "Zip up project source and docs folders", "output": "zip -r project.zip source docs" },
  { "input": "Make a zip file that includes readme and changelog", "output": "zip files.zip readme changelog" },
  { "input": "Zip main.go and config.yaml", "output": "zip go_app.zip main.go config.yaml" },
  { "input": "Zip the directory public into public.zip", "output": "zip -r public.zip public" },
  { "input": "Zip every PNG in the folder images", "output": "zip images.zip images/*.png" },
  { "input": "Compress all markdown and HTML files", "output": "zip web_docs.zip *.md *.html" },
  { "input": "Zip bash and zsh config files", "output": "zip shell_configs.zip .bashrc .zshrc" },
  { "input": "Create zip from requirements.txt and setup.py", "output": "zip python_package.zip requirements.txt setup.py" },
  { "input": "Zip nginx config directory", "output": "zip -r nginx.zip /etc/nginx" },
  { "input": "Compress resume.docx and photo.jpg into application.zip", "output": "zip application.zip resume.docx photo.jpg" },
  { "input": "Zip scripts and results directories", "output": "zip -r job.zip scripts results" },
  { "input": "Zip the videos directory", "output": "zip -r videos.zip videos" },
  { "input": "Zip a specific file from downloads", "output": "zip myfile.zip ~/Downloads/targetfile.txt" },
  { "input": "Zip two different folders logs and configs", "output": "zip -r archive.zip logs configs" },
  { "input": "Compress everything but the node_modules folder", "output": "zip -r app.zip . -x node_modules/*" }
]
